(function() {
	// iframe下更新数据,并跳转到页面
	if (window.top != window.self) {
		try {
        	//webview 不会跳转,这里第三方登陆后,刷新父页面,自动登录
			parent.location.reload()
			//parent.Core.Data = Core.Data;
			//parent.location.hash = "#home&force";
			//parent.Core.clearFrame();
		} catch (e) {
			//跨域问题，通知sdk直接跳转到游戏
			Core.finishLogin();
		}

	}

	init_data();
	

	function init_data(response) {
		if (response) {
			$(response).appendTo($('body .mask'));
		}
		// Home模块
		var Home = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Home, Module);

		Home.prototype.bind = function() {
			// 绑定模块事件到section
			var that = this;
			that.$c.on('click', '.op-logout', function(e) {
				e.preventDefault();
				// Core.ajax_do(that.$c.find('.op-logout'), that.logout_cb,
				// 	that);
				that.logout_cb();
				return false;
			});
			that.$c.on('click', 'label.help', function(e) {
				e.preventDefault();
				e.stopPropagation();
				/*
				 * @todo-list bug fixed in android,the click event fired twice!
				 */
				if (Core.cur_mod == 'help')
					return;
				Core.showMod('help');
				return false;
			});
			that.$c.on("click",".js-enter-game",function(e){//强制进入实名认证界面				
				e.stopPropagation();
				Core.showTips("根据政策规定，通过实名认证才能进入游戏哦！");
			});
		}

		Home.prototype.logout_cb = function(data) {
			Core.updateData();
			Core.clearMods();
			Core.showMod('login');
			
		}
        Home.prototype.show_after = function(){
            $('#login').hide();
        }
		Core.registerMod('home', Home);

		// 帮助信息模块
		var Help = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Help, Module);
		Core.registerMod('help', Help);

		// 注册协议
		var Agreement = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Agreement, Module);
		Agreement.prototype.bind = function() {
			var that = this;
			var checkbox = that.$c.find(".checkbox");
			var checkbox_type = that.$c.find("i.icon-xuanzhong");
			
			that.$c.on("click",checkbox,function(e){
				if(checkbox.hasClass('checkbox-2')){	
					checkbox_type.parents(".checkbox").removeClass("checkbox-2");
					checkbox_type.addClass("checkbx");
				}else{
					checkbox_type.parents(".checkbox").addClass("checkbox-2");
					checkbox_type.removeClass("checkbx");
				}
			});

			
			that.$c.on('click', '[type=submit],.submit', function(e) {				
				if (that.$c.find('.checkbox-2').length<=0 ){
					Core.showTips('已阅读请打勾',1);
					return false;
				}
				
			});
		}
		Core.registerMod('agreement', Agreement);


		// Login模块
		var Login = function(modId) {
			this.other_login = true;
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Login, Module);

		Login.prototype.bind = function() {
			var that = this;
			that.$c.on('click', 'input[type=submit],.submit', function(e) {
				e.preventDefault();
				if (that.$c.find('.eg')[0].checked == false) {
					// 直接进入游戏
					Core.ajax_do(that.$c.find('.ajax'), that.login_eg_cb,
						that);
				} else {
					Core.ajax_do(that.$c.find('.ajax'), that.login_cb,
						that);
				}
				return false;
			});
			that.$c.on('click', '.drop-down', function(e) {
				e.preventDefault();
				that.$c.find('.pull-box').toggle();
				return false;
			});
			that.$c.on('click', 'ul.drop-ul li a', function(e) {
				e.preventDefault();
				that.$c.find('input[name=username]').val(
					$(e.target).html());
				that.$c.find('input[name=password]').val($(e.target).attr('data-p'));
				that.$c.find('.pull-box').hide();
				
				return false;
			})
			that.$c.on('click', '.op-guest', function(e) {
				e.preventDefault();
				var _name = localStorage.getItem('guest_n');
				var _pwd = localStorage.getItem('guest_p');
				if (_name && _name != '') {
					//已经有游客帐号,使用游客帐号登录
					that.$c.find('input[name=username]').val(_name);
					that.$c.find('input[name=password]').val(_pwd);
					console.log('submit-u:' + _name + ":" + _pwd);
					Core.ajax_do(that.$c.find('.ajax'), that.login_cb,
						that);
				} else {
					Core.ajax_do(that.$c.find('.op-guest'), that.guest_cb,
						that);
				}
				return false;
			});
			that.$c.on('click', '.iframe', function(e) {
				e.preventDefault();
				var src = $(this).attr('href');
				var title = $(this).attr('title');
				if (Core.isFile) {
					src = Core.server + src;
				}
				Core.Data.frame_title = title;
				Core.Data.frame_src = src;
				Core.updateMod('frame');
				return false;
			});	
			
		}

		Login.prototype.cache = function(n, p) {
			var name = n ? n : this.$c.find('input[name=username]').val(),
				password = p ? p : this.$c.find('input[name=password]').val(),
				name_ary,index_ary,firstUser;
			var _d = localStorage.getItem('user_names');
			if (_d) {
				name_ary = JSON.parse(_d);
			}
			var _i = localStorage.getItem('user_indexs');
			if (_i) {
				index_ary = JSON.parse(_i);
			}

			if(index_ary == null){
				index_ary = [];
				index_ary.unshift(name);
				localStorage.setItem('user_indexs', JSON.stringify(index_ary));
			}else{
				if($.inArray(name,index_ary) == -1){
					index_ary.unshift(name);
					localStorage.setItem('user_indexs', JSON.stringify(index_ary));
				}
			}
			if (name_ary == null) {
				name_ary = {};
				name_ary[name] = password;
				localStorage.setItem('user_names', JSON.stringify(name_ary));
			} else {
				if (!(name in name_ary)) {
					name_ary[name] = password;
					localStorage.setItem('user_names', JSON.stringify(name_ary));
				} else {
					if (name_ary[name] != password) {
						name_ary[name] = password;
						localStorage.setItem('user_names', JSON.stringify(name_ary));
					}
				}
			}
			Core.user_indexs = index_ary;
			Core.user_names = name_ary;
			
			$("input[name='loginUserName']").val(Core.Data.username);
			$("input[name='loginPassword']").val(Core.user_names[Core.Data.username]);
			
		}
		Login.prototype.login_cb = function(result) {
			Core.updateData(result.msg);
			// 显示一个登录成功信息，并跳转到home
			Core.first_user = this.$c.find('[name="username"]').val()
			Core.first_password = this.$c.find('[name="password"]').val()
			this.cache();
			Core.showTips('成功登录，欢迎使用'+ Core.PLATFORM_NAME +'游戏平台');
			Core.updateMod('home');
		}
		Login.prototype.login_eg_cb = function(result) {
			Core.updateData(result.msg);
			// 跳转进入游戏
			this.cache();
			Core.showTips('成功登录，欢迎使用'+ Core.PLATFORM_NAME +'游戏平台, 正在进入游戏');
			setTimeout(function() {
				Core.finishLogin();
			}, 1000);
		}
		Login.prototype.guest_cb = function(data) {
			Core.updateData(data.msg);
			//保存游客用户名和密码到localstorage
			localStorage.setItem('guest_n', data.msg.username);
			localStorage.setItem('guest_p', data.msg.pwd);
			this.cache(data.msg.username, data.msg.pwd);
			Core.isFresh = false;
			Core.updateMod('home');
			Core.showTips("游客登录成功，请及时修改帐号和密码。", true);
		}

		Login.prototype.show_after = function() {
			var user_indexs = localStorage.getItem('user_indexs'),
				names = localStorage.getItem('user_names');
			var loginUserName = $("input[name='loginUserName']").val(),
				loginPassword = $("input[name='loginPassword']").val(),
				initUserName = $("input[name='initUserName']").val();
			this.$c.find(".forgetpsw").click(function(){
				$(".pwd_box").children(".step-tab").css("display","block");
				$(".pwd_box").children(".step-box").css("display","none");
			});
			var names = JSON.parse(names);
			var userIdx = JSON.parse(user_indexs);
			if (names != null) {

				delete names["undefined"];

				this.$c.find('.drop-down').show();
				var lis = '';

				for(var ele = 0,l = userIdx.length;ele<l;ele++){
					lis += '<li><a data-p="' + names[userIdx[ele]] + '">' + userIdx[ele] + '</a></li>';
				}

				this.$c.find('.drop-ul').html(lis);
				
				if(loginUserName != ""){
					this.$c.find("input#js_login_username").val(loginUserName);				
				}else if(initUserName != ""){
					this.$c.find("input#js_login_username").val(initUserName);
					this.$c.find("input#js_login_password").val(Core.user_names[initUserName]);
				}
				
			}else{
				this.$c.find("input#js_login_username").val(Core.first_user);
				this.$c.find("input#js_login_password").val(Core.first_password);
			}
			if (Core.Data.other_login && this.other_login) {
				if(Core.Data.other_login.length > 0){
					this.$c.find(".other-login-bx").removeClass("hide");
				}
				//设置第三方登录显示
				for (var i = 0, l = Core.Data.other_login.length; i < l; i++) {
					this.$c.find('.' + Core.Data.other_login[i]).removeClass('hide');
				}
				this.other_login = false;
			}
			
			if(loginPassword != ""){
				this.$c.find("input#js_login_password").val(loginPassword);
			}
			
			var old_pwd = localStorage.getItem('old_pwd');
			if(Core.Data.new_pwd != "" && Core.Data.new_pwd == old_pwd & Core.user_names != null){
				this.$c.find("input#js_login_password").val(Core.user_names[this.$c.find("input#js_login_username").val()]);
				console.log($("input#js_login_password").val());
			}
			
			$("#find_pwd").find(".user-center span").html("找回密码");

		}

		Core.registerMod('login', Login);

		// Login_before模块
		var Login_before = function(modId) {
			this.other_login = true;
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Login_before, Module);

		Login_before.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '.login_case2', function(e) {
				e.preventDefault();
				Core.ajax_do(that.$c.find('.op-guest'), that.guest_cb, that);
				return false;
			});

			that.$c.on('click', '.login_case_qq', function(e){
				e.preventDefault();

				var src = '/user/auth2/qq/login/?next=/sdk/login?app_id=' + Core.Data.app_id;
				if (Core.isFile) {
					src = Core.server + src;
				}
				Core.Data.frame_title = 'QQ登录';
				Core.Data.frame_src = src;
				Core.updateMod('frame');
				return false;
			});
		}
		//使用Login模块的业务逻辑
		Login_before.prototype.cache = Login.prototype.cache;
		Login_before.prototype.guest_cb = Login.prototype.guest_cb;
		Login_before.prototype.show_after = function() {
			if (Core.Data.other_login && this.other_login) {
				//设置第三方登录显示
				for (var i = 0, l = Core.Data.other_login.length; i < l; i++) {
					this.$c.find('.' + Core.Data.other_login[i]).removeClass('hide');
				}
				if(Core.Data.other_login.length == 0){
						//没有可用的第三方登录，直接跳转到home界面
						Core.updateMod('home');
					}
				this.other_login = false;
			}

		}
		Core.registerMod('login_before', Login_before);

		// Register模块
		var Register = function(modId) {
			this._username = null
			this._pwd = null
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Register, Module);
		Register.prototype.bind = function() {
			var that = this;
			var checkbox = that.$c.find(".checkbox");
			var checkbox_type = that.$c.find("i.icon-xuanzhong");

			that.$c.on("click",checkbox,function(e){
				if(checkbox.hasClass('checkbox-2')){
					checkbox_type.parents(".checkbox").removeClass("checkbox-2");
					checkbox_type.addClass("checkbx");
				}else{
					checkbox_type.parents(".checkbox").addClass("checkbox-2");
					checkbox_type.removeClass("checkbx");
				}
			});


			that.$c.on('click', '[type=submit],.submit', function(e) {
				var passWordReg = /^[0-9a-zA-Z]+$/;
				e.preventDefault();
				if(/[A-Z]/.test(that.$c.find("input[name='username']").val())){
					Core.showTips("账号不能有大写字母！");
				}else if(/[A-Z]/.test(that.$c.find("input[name='password']").val())){
					Core.showTips("密码不能有大写字母！");
				}else if(that.$c.find("input[name='password']").val().length<6 || that.$c.find("input[name='password']").val().length>16){
					Core.showTips("密码长度为6-16位字符！");
				}else if(!that.$c.find('.checkbox-2').length>0){
					Core.showTips('请同意'+Core.PLATFORM_NAME+'网络协议',1);
				}else if(!passWordReg.test(that.$c.find("input[name='password']").val())){
					Core.showTips('请输入数字字母组成的密码!', true);
					return false;
				}else{
					//如果是游客的话则调用安卓截屏方法
					if (that.$c.find('[name="username"]').val() == that.$c.find('[name="old_usernmae"]').val() && window.android != undefined && window.android.screenShot != undefined ){
						window.android.screenShot();
					}	
					$(this).attr("disabled",true);
					$(this).css({"background":"#999"});
					$(this).parent("li").css({"background":"#999"});
					
					Core.ajax_do(that.$c.find('.ajax'), that.register_cb, that);
				}
				return false;
			});

			that.$c.on('change','[name="username"]',function(e){
				if (this.value == that.$c.find('[name="old_usernmae"]').val()){
					that.$c.find('[name="type"]').val(-1)
				} else{
					that.$c.find('[name="type"]').val(0)
				}
			})

		}
		Register.prototype.set_random = function(){
			var that = this;
			var random_name = 'yy' + Math.random().toString(36).substr(-2) + new Date().getTime().toString(36).substr(-4)
			var random_passwd = Math.random().toString(36).substr(-6)
			that.$c.find('[name="username"]').val(random_name)
			that.$c.find('[name="old_usernmae"]').val(random_name)
			that.$c.find('[name="password"]').val(random_passwd)
			that.$c.find('[name="type"]').val(-1)
			that.$c.find("input#btn-regist").attr('disabled', null);
			that.$c.find('.submit').css({"background":"#00beef"});
			that.$c.find('.submit').parent("li").css({"background":"#00beef"});

		}
		Register.prototype.cache = Login.prototype.cache;

		Register.prototype.register_cb = function(result) {
			Core.updateData(result.msg);
			Core.first_user = this.$c.find('[name="username"]').val()
			Core.first_password = this.$c.find('[name="password"]').val()
			// 显示一个注册成功信息，并跳转到home
			this.cache();
            if (Core.Data.force_auth == 1 && Core.Data.compellation_name == "" && Core.Data.identity_card == "") {
                Core.showTips("根据政策规定，通过实名认证才能进入游戏哦！");
                Core.updateMod('identityCard');
            }else{
                Core.showTips('成功注册，欢迎使用' +  Core.PLATFORM_NAME + '游戏平台');
                Core.updateMod('home');
			}
			this.$c.find("input#btn-regist").attr('disabled', null);
			this.$c.find('.submit').css({"background":"#00beef"});
			this.$c.find('.submit').parent("li").css({"background":"#00beef"});
		}
		Register.prototype.show_after = function() {
			this.set_random();
		}
		Core.registerMod('register', Register);

		// Mibao模块
		var Mibao = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Mibao, Module);
		Mibao.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '[type=submit],.submit', function(e) {
				e.preventDefault();				
				Core.ajax_do(that.$c.find('.ajax'), that.mibao_cb, that);				
				return false;
			});
		}
		Mibao.prototype.mibao_cb = function(data) {
			var status_code = data.code;
			var msg = data.msg;
			if (0 == status_code) {
				Core.Data.safe_question = msg.question;
				Core.Data.safe_answer = msg.answer;
			}
			// 显示一个成功信息，并跳转到home
			Core.showTips("成功设置密保!", true);
			this.isValid = false;
			Core.showMod('home');
		}
		Core.registerMod('mibao', Mibao);

		// 找回密码模块
		var Find_pwd = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Find_pwd, Module);
		Find_pwd.prototype.bind = function() {
			var that = this;
			var pwd_header=["手机找回密码","密保找回密码","联系客服","重置密码","找回密码"];
			var pwd_header_back = {
					0 : '<a href="#login" class="lefticon"><i class="iconfont icon-fanhui"></i></a>',
					1 : '<a href="javascript:;" class="lefticon back-btn"><i class="iconfont icon-fanhui"></i></a>'
			};
			var browser = {
			    versions: function() {
			        var u = navigator.userAgent,
			            app = navigator.appVersion;
			        return { //移动终端浏览器版本信息
			            trident: u.indexOf('Trident') > -1,
			            presto: u.indexOf('Presto') > -1,
			            webKit: u.indexOf('AppleWebKit') > -1,
			            gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,
			            mobile: !!u.match(/AppleWebKit.*Mobile.*/),
			            ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/),
			            android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,
			            iPhone: u.indexOf('iPhone') > -1,
			            iPad: u.indexOf('iPad') > -1,
			            webApp: u.indexOf('Safari') == -1
			        };
			    }(),
			    language: (navigator.browserLanguage || navigator.language).toLowerCase()
			};
			if (browser.versions.mobile) { //判断是否是移动设备打开
			    var ua = navigator.userAgent.toLowerCase();
			    if (browser.versions.ios) {
			        //是否在IOS浏览器打开
			        $("#js_kefu_qq").href = "mqq://im/chat?chat_type=wpa&uin=2739920773&version=1&src_type=web";
			        $("#js_player").href = "mqq://im/chat?chat_type=wpa&uin=167355030&version=1&src_type=web";
			    }
			    if (browser.versions.android) {
			        //是否在安卓浏览器打开
			    	$("#js_kefu_qq").href = "mqqwpa://im/chat?chat_type=wpa&uin=2739920773";
			        $("#js_player").href = "mqqwpa://im/chat?chat_type=wpa&uin=167355030";
			    }
			} else {
			    //否则就是PC浏览器打开
				$("#js_kefu_qq").href = "http://wpa.qq.com/msgrd?v=3&uin=2739920773&site=qq&menu=yes";
		        $("#js_player").href = "http://wpa.qq.com/msgrd?v=3&uin=167355030&site=qq&menu=yes";
			}		
			that.$c.on("click","#js_findPSW_getcode",function(){//找回密码获取验证码
				var $self = $(this)
					phone = $("#js_findPSW_mobile").val();
				Core.ajax({
					type:"post",
					url:"/sms_validate_code/?mobile="+phone,
					success:function(msg){
						if(msg.length == 0){//为空(已经发送)
							Core.showTips('验证码发送成功，请注意查收', true);
							$self.addClass("disabled");
							var counter = 60;
							var timer = setInterval(function(){
								if(counter > 0){
									$self.text(counter + "秒再获取");
									counter --;
								}else{
									clearInterval(timer);
									$self.text("获取验证码");
									$self.removeClass("disabled");
								}
							},1000);
					    }else{
					    	Core.showTips(msg, true);
					    }
					}
				});
			});
			that.$c.on("click","#js_findPSW_confirm",function(){
				var code = that.$c.find("#js_findPSW_ranks").val(),
					accout = $("#js_findPSW_accout").val(),
					phoneTest = $("#js_findPSW_mobile").val(),
					//iphoneReg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
					iphoneReg = /^1(3|4|5|7|8)\d{9}$/;
				if($.trim(accout) == ""){
					Core.showTips('请输入账号!', false);
					return false;
				}
				if($.trim(phoneTest) == ""){
					Core.showTips('请输入手机号码!', false);
					return false;
				}
				if(!iphoneReg.test(phoneTest)){
					Core.showTips('请输入11位手机号码!', false);
					return false;
				}
				if($.trim(code) == ""){
					Core.showTips('请输入验证码!', true);
					return false;
				}
				Core.ajax({
					type:"post",
					url:"/user/password_by_mobile?mobile="+phoneTest+"&username="+accout+"&vcode="+code,
					data:{format:"json"},
					dataType:"json",
					success:function(res){
						if(res.code === 0){
							var message = JSON.parse(res.msg);
							Core.showTips('验证成功！请设置新密码', true);
							that.$c.find("input[name='pwd_code']").val(message.pwd_code);
							that.$c.find(".user-center span").html(pwd_header[4]);
							that.$c.find('.step-tab').hide().siblings(".step-box").show().children("div").eq(3).removeClass("hide").siblings("div").addClass("hide");
							that.$c.find("#js_UserName").text(message.username);
							$("input[name='loginUserName']").val(message.username);
						}else{
							Core.showTips(res.msg, true);
						}
					}
				});
			});
			that.$c.on("click","#returnhome",function(){
				that.$c.find(".user-center span").html("找回密码");
			});
			that.$c.on("click","#js_confirm_resetnewpsw",function(){
				var NewPsw = that.$c.find("#js_reset_newpsw").val(),
					NewKey = that.$c.find("input[name='pwd_code']").val(),
					passWordReg = /^[0-9a-zA-Z]+$/,
					account = $("input[name='loginUserName']").val();
				var names = localStorage.getItem('user_names');
				names = JSON.parse(names);
				if(!passWordReg.test(NewPsw)){
					Core.showTips('请输入数字字母组成的密码!', true);
					return false;
				}
				Core.ajax({
					type:"post",
					url:"/user/reset_passwd?pwd_code="+NewKey+"&password="+NewPsw,
					data:{format:"json"},
					dataType:"json",
					success:function(res){
						if(res.code === 0){
							Core.showTips('重置密码成功！', true);
							$("input[name='loginPassword']").val(NewPsw);
							names[account] = NewPsw;
							localStorage.setItem('user_names',JSON.stringify(names));
							Core.user_names = names;
							$("#js_reset_newpsw").val("");
							setTimeout(function() {
								Core.updateMod('login');
							}, 500);
						}else{
							Core.showTips(res.msg, true);
						}
					}
				});
			});

			var checkbox = that.$c.find(".checkbox");
			var checkbox_type = that.$c.find("i.icon-xuanzhong");
			var checkboxInput = that.$c.find("input#js_reset_newpsw");

			that.$c.on("click",checkbox,function(e){
				if(checkbox.hasClass('checkbox-2')){
					checkbox_type.parents(".checkbox").removeClass("checkbox-2");
					checkbox_type.addClass("checkbx");
					checkboxInput.attr("type","password");
				}else{
					checkbox_type.parents(".checkbox").addClass("checkbox-2");
					checkbox_type.removeClass("checkbx");
					checkboxInput.attr("type","text");
				}
			});

			that.$c.on('click', '.pwd_box .step-tab li a', function(e) {
				var ipar = $(this).parent("li"),
				 	iIndex = ipar.index();

				that.$c.find("#js_findPSW_ranks").val("");
				$("#js_findPSW_accout").val("");
				$("#js_findPSW_mobile").val("");

				that.$c.find('.step-tab').hide().siblings(".step-box").show().children("div").eq(iIndex).removeClass("hide").addClass("fn-icon-2").siblings("div").addClass("hide").removeClass("fn-icon-2");
				that.$c.find(".user-center span").html(pwd_header[iIndex]);
				that.$c.find(".user-center a").replaceWith(pwd_header_back[1]);
			});

			that.$c.on('click', '.user-center a.back-btn', function(e) {
				$(this).parents(".new-sdk-container").find(".step-box").hide().siblings(".step-tab").show();
				that.$c.find(".user-center span").html(pwd_header[4]);
				that.$c.find(".user-center a").replaceWith(pwd_header_back[0]);
			});

			that.$c.on('click', '.pwd_box a.kefu_subbtn', function(e) {
				$(this).parents(".step-box").hide().siblings(".step-tab").show();
				that.$c.find(".user-center span").html(pwd_header[4]);
				that.$c.find(".user-center a").replaceWith(pwd_header_back[1]);
			});


			that.$c.on('click', '.op-primary', function(e) {

				var $form = that.$c.find('.fn-icon-2');
				e.preventDefault();
				console.log($form);
				Core.ajax_do($form, that.findpwd_cb, that);
				return false;
			});


			that.$c.on('click', '.step-tab .function-list-title', function(e) {

				that.$c.find('.step-tab .function-list-content').hide();
				$(e.target).parent().next().show();
				that.$c.find('.step-tab .function-list-icon').removeClass('function-list-icon-2')
				$(this).find('.function-list-icon').addClass('function-list-icon-2').addClass('function-list-icon-1')
				if (!$(e.target).parent().next().is('.form')) {
					that.$c.find('.next-btn').hide();
				} else {
					that.$c.find('.next-btn').show();
				}
			});
		}
		Find_pwd.prototype.findpwd_cb = function(data) {
			var code = data.code;
			var msg = data.msg;

			if (0 != code) {
				Core.showTips(msg, false);
				return;
			}
			if (typeof msg == 'object') {
				// 回答密保
				Core.Data.ans_temp = msg;
				Core.updateMod('answer_question');
				Core.showTips('加载成功.', true,100);
			} else {
				// 通过邮箱
				Core.showTips(msg, true);
				Core.showMod("login");
			}

		}
		Find_pwd.prototype.show_after = function() {
			var that = this;
			this.$c.find('input[name="username"]').val($('#login input[name="username"]').val());
			this.$c.find('.sms').html(Core.Data.mobile_helper_number);

			var kefu = Core.Data.kefu_info,
				kefuInfo = JSON.stringify(kefu);
			if(typeof(kefuInfo) !== "undefined"){
				localStorage.setItem("kefuInfo",kefuInfo);
			}else{
				that.$c.find(".pwd_txt .default_text").css("display","block");
				that.$c.find(".pwd_txt .get_text").html("").css("display","none");
			}
			var getItem = localStorage.getItem("kefuInfo"),
				kefu_info = JSON.parse(getItem),
				isPhone = /^([0-9]{3,4}-)?[0-9]{7,8}$/,
				isMob=/^((\+?86)|(\+86))?(13[012356789][0-9]{8}|15[012356789][0-9]{8}|18[02356789][0-9]{8}|147[0-9]{8}|1349[0-9]{7})$/;

			if(kefu_info == ""){
				that.$c.find(".pwd_txt .default_text").css("display","block");
				that.$c.find(".pwd_txt .get_text").html("").css("display","none");
			}else{
				that.$c.find(".pwd_txt .default_text").css("display","none");
				that.$c.find(".pwd_txt .get_text").html("").css("display","block");
				for(var key in kefu_info){
					var reg = /\d+/g,
						str = kefu_info[key],
						ms = str.match(reg),
						result = ms.join("-");

						if( isMob.test(result) || isPhone.test(result) ){
							var hrefTel = '<a href="tel:'+result+'">'+result+'</a>',
								stringTel = str.split("：")[0];
							that.$c.find(".pwd_txt .get_text").append('<p>'+stringTel+'：'+hrefTel+'</p>');
						}else{
							that.$c.find(".pwd_txt .get_text").append('<p>'+kefu_info[key]+'</p>');
						}
				}
			}
		}
		Core.registerMod('find_pwd', Find_pwd);

		// Mibao模块
		var Bind = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Bind, Module);
		Bind.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '[type=submit],.submit', function(e) {
				e.preventDefault();
				Core.ajax_do(that.$c.find('.ajax'), that.bind_cb, that);
				return false;
			});
			that.$c.on('click', '#bind-mobile', function(e) {
				e.preventDefault();
				that.$c.find('#bind_phone_form').show();
				return false;
			});
			that.$c.on('click', '#bind-check', function(e) {
				e.preventDefault();
				Core.ajax_do($(e.target), that.bind_ch, that);
				return false;
			});
		}
		Bind.prototype.bind_ch = function(data) {
			var code = data.code;
			Core.Data.bind_statu = data.msg.bind_statu;
			if (data.msg.bind_statu == 1) {
				Core.showTips('电话绑定未成功', false);
			}
			Core.updateMod('bind');
		}
		Bind.prototype.bind_cb = function(data) {

			var code = data.code;
			if (code != 0)
				return;
			$(".bind_phone_tip").html(Core.Data.bind_mobile_tips);
			Core.Data.bind_statu = 1;
			Core.Data.bind_phone = this.$c.find('input[name=mobile]').val();
			this.$c.find('span.text-info').html(this.$c.find('input[name=mobile]').val());
			Core.showTips('通过电话确认后可绑定手机!', true);

			this.$c.find('#bind_phone_form').hide();
			this.isValid = false;
			setTimeout(function() {
				Core.updateMod('bind');
			}, 1000);
		}
		Core.registerMod('bind', Bind);

		//绑定手机模块
		var BindMobile = function(modId){
			Module.call(this, modId);
		}
		Core.inherit(BindMobile, Module);
		BindMobile.prototype.bind = function(){
			var that = this;
			var SendMsg = {
					mobileReg : function(iphone){
						var iphoneReg = /^1(3|4|5|7|8)\d{9}$/,
							phoneTest = $(iphone).val();
						if($.trim(phoneTest) == ""){
							Core.showTips('请输入手机号码!', false);
							return false;
						}
						if(!iphoneReg.test(phoneTest)){
							Core.showTips('请输入11位手机号码!', false);
							return false;
						}
					},
					send : function(element,iphone){
						var self = this,
							ele = that.$c;
						ele.on("click",element,function(){
							var phoneTest = $(iphone).val();
							if(self.mobileReg(iphone) == false) return false;
							Core.ajax({
								type:"post",
								url:"/sms_validate_code/?mobile="+phoneTest,
								success:function(msg){
									if(msg.length == 0){//为空(已经发送)
										Core.showTips('验证码发送成功，请注意查收', true);
										$(element).addClass("disabled");
										var counter = 60;
										var timer = setInterval(function(){
											if(counter > 0){
												$(element).text(counter + "秒再获取");
												counter --;
											}else{
												clearInterval(timer);
												$(element).text("获取验证码");
												$(element).removeClass("disabled");
											}
										},1000);
								    }else{
								    	Core.showTips(msg, true);
								    }
								}
							});
						});
					},
					bind : function(element,iphone,rank){
						var self = this,
							ele = that.$c;
						ele.on("click",element,function(){
							var code = $(rank).val(),
								phoneTest = $(iphone).val();
							if(self.mobileReg(iphone) == false) return false;
							if($.trim(code) == ""){
								Core.showTips('请输入验证码!', true);
								return false;
							}
							Core.ajax({
								type:"post",
								url:"/user/bind_mobile?mobile="+phoneTest+"&vcode="+code,
								data:{format:"json"},
								dataType:"json",
								success:function(res){
									if(res.code === 0){
										Core.showTips('绑定成功!', true);
										Core.Data.bind_phone = phoneTest;
										setTimeout(function() {
											Core.updateMod('home');
										}, 500);
									}else{
										Core.showTips(res.msg, true);
									}
								}
							});
						});
					}
				};
				SendMsg.send("#js_getcode","#js_iphone");
				SendMsg.bind("#js_conform","#js_iphone","#js_ranks");
		}
		BindMobile.prototype.show_after = function(){

		}
		Core.registerMod('bindMobile', BindMobile);

		//解绑手机模块
		var UnBindMobile = function(modId){
			Module.call(this, modId);
		}
		Core.inherit(UnBindMobile, Module);
		UnBindMobile.prototype.bind = function(){
			var that = this;
			that.$c.on("click","#js_unbind_getcode",function(){
				var $self = $(this),
					phone = Core.Data.bind_phone;
				Core.ajax({
					type:"post",
					url:"/sms_validate_code/?mobile="+phone,
					success:function(msg){
						if(msg.length == 0){//为空(已经发送)
							Core.showTips('验证码发送成功，请注意查收', true);
							$self.addClass("disabled");
							var counter = 60;
							var timer = setInterval(function(){
								if(counter > 0){
									$self.text(counter + "秒再获取");
									counter --;
								}else{
									clearInterval(timer);
									$self.text("获取验证码");
									$self.removeClass("disabled");
								}
							},1000);
					    }else{
					    	Core.showTips(msg, true);
					    }
					}
				});
			});
			that.$c.on("click","#js_unbind",function(){
				var code = $("#js_unbind_ranks").val(),
					phoneTest = Core.Data.bind_phone;
				if($.trim(code) == ""){
					Core.showTips('请输入验证码!', true);
					return false;
				}
				Core.ajax({
					type:"post",
					url:"/user/unbind_mobile?mobile="+phoneTest+"&vcode="+code,
					data:{format:"json"},
					dataType:"json",
					success:function(res){
						if(res.code === 0){
							Core.showTips('解绑成功!', true);
							Core.Data.bind_phone = "";
							$("#js_iphone").val("");
							$("#js_ranks").val("");
							setTimeout(function() {
								Core.updateMod('home');
							}, 500);
						}else{
							Core.showTips(res.msg, true);
						}
					}
				});
			});
		}
		UnBindMobile.prototype.show_after = function(){
			var phoneMobile = Core.Data.bind_phone,
				getBefore = phoneMobile.substring(0,3),
				getAfter = phoneMobile.substring(8,11),
				phoneHtml = getBefore+"****"+getAfter;
			this.$c.find(".phoneMobile").html(phoneHtml);
		}
		Core.registerMod('unbindMobile', UnBindMobile);

		//实名认证
		var IdentityCard = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(IdentityCard, Module);
		IdentityCard.prototype.bind = function() {
			var that = this;
			this.$c.on('click', '.submit', function() {
				var identityCard = that.$c.find("input[name='identity_card']").val(),//身份证
					compellationName = that.$c.find("input[name='compellation_name']").val(),//姓名
					compellationNameReg = /^[\u4e00-\u9fa5]{2,10}$/i;//2-10位汉字
				if($.trim(identityCard) == ""){
					Core.showTips("请输入身份证号码",false);
					return false;
				}else if(IsIdCard(identityCard) == false){
					Core.showTips("身份证号码有误，请检查输入是否正确",false,5000);
					return false;
				}else if($.trim(compellationName) == ""){
					Core.showTips("请输入身份证姓名",false);
					return false;
				}else if(!compellationNameReg.test(compellationName)){
					Core.showTips("请输入正确的中文姓名",false);
					return false;
				}
				Core.ajax({
					type:"post",
					url:"/user/bind_identity_card?identity_card="+identityCard+"&compellation_name="+compellationName,
					data:{format:"json"},
					dataType:"json",
					success:function(res){
						if(res.code === 0){
							Core.showTips('认证成功!', true);
							Core.Data.compellation_name = compellationName;
							Core.Data.identity_card = identityCard;
							setTimeout(function() {
								Core.updateMod('home');
							}, 500);
						}else{
							Core.showTips(res.msg, true);
						}
					}
				});
			});
		}
		IdentityCard.prototype.show_after = function(){

		}
		Core.registerMod('identityCard', IdentityCard);

		//已认证
		var IdentityCardOk = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(IdentityCardOk, Module);
		IdentityCardOk.prototype.show_after = function(){
			var compellation_name = Core.Data.compellation_name,//姓名
				identity_card = Core.Data.identity_card;//身份证
			if(compellation_name.length == 2){
				var getBefore = compellation_name.substring(0,1),
					nameHtml = getBefore+"*";
			}else if(compellation_name.length == 3){
				var getBefore = compellation_name.substring(0,1),
					nameHtml = getBefore+"**";
			}else if(compellation_name.length == 4){
				var getBefore = compellation_name.substring(0,2),
					nameHtml = getBefore+"**";
			}else if(compellation_name.length > 4){
				var getBefore = compellation_name.substring(0,2),
					starNum = compellation_name.length,
					star = "";
				for(var i = 0;i<starNum - 2;i++){
					star += "*";
				}
				nameHtml = getBefore+star;
			};
			if(identity_card.length == 15){
				var getBefore = identity_card.substring(0,1),
					getAfter = identity_card.substring(14,15),
					cardHtml = getBefore+"*************"+getAfter;
			}else if(identity_card.length == 18){
				var getBefore = identity_card.substring(0,1),
					getAfter = identity_card.substring(17,18),
					cardHtml = getBefore+"****************"+getAfter;
			};
			this.$c.find(".compellation_name").html(nameHtml);
			this.$c.find(".identity_card").html(cardHtml);
		};
		Core.registerMod('identityCard_ok', IdentityCardOk);

		// Mail模块
		var Mail = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Mail, Module);
		Mail.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '[type=submit],.submit', function(e) {
				e.preventDefault();
				Core.ajax_do(that.$c.find('.ajax'), that.mail_cb, that);
				return false;
			});
			that.$c.on('click', '#change-mail-btn', function(e) {
				e.preventDefault();
				that.$c.find('#bind_mail_form').show();
				that.$c.find('#bind-mail-btn').show();
				$(this).hide()
				return false;
			});
			that.$c.on('click', '.op-primary', function(e) {
				e.preventDefault();
				Core.ajax_do(that.$c.find('.ajax'), that.mail_cb, that);
				return false;
			});
		}
		Mail.prototype.mail_cb = function(data) {
			var code = data.code;
			Core.Data.bind_mail_statu = 1;
			Core.Data.mail = this.$c.find('input[name=email]').val();
			this.$c.find('span.text-info').html(this.$c.find('input[name=email]').val());
			Core.showTips('请登录您的邮箱,完成邮箱认证功能。', true);
			this.$c.find('#bind_mail_form').hide();
			this.isValid = false;
			setTimeout(function() {
				Core.updateMod('mail');
			}, 1000);
		}
		Core.registerMod('mail', Mail);

		// 重置密码模块
		var Reset_pwd = function(modId) {
			Module.call(this, modId);
		}
		// 继承基础模块
		Core.inherit(Reset_pwd, Module);

		Reset_pwd.prototype.bind = function() {
			this.$c.on('click', '.op-primary', function() {
				Core.updateMod("modify_pwd");
			});
		}
		Core.registerMod('reset_pwd', Reset_pwd);

		// 回答密保模块
		var Answer_question = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Answer_question, Module);

		Answer_question.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '.op-primary', function(e) {
				e.preventDefault();

				Core.ajax_do(that.$c.find('.ajax'), that.aq_cb, that);
				return false;
			});
		}
		Answer_question.prototype.aq_cb = function(data) {
			console.log(data);
			var code = data.code;
			var msg = data.msg;
			var name = localStorage.getItem('user_names');
			Core.updateData(msg);
			Core.Data.new_pwd = msg.password;

			name = JSON.parse(name);
			if(name == null){
				name = null;
			}else{
				name[msg.nickname] = msg.password;
			}

			localStorage.setItem('user_names',JSON.stringify(name));
			Core.user_names = name;

			// 强制更新显示重置密码模块
			Core.updateMod('reset_pwd');
			Core.showTips('重置成功.',true,1000);
			localStorage.setItem('old_pwd',Core.Data.new_pwd);
		}
		Core.registerMod('answer_question', Answer_question);

		var Modify_pwd = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Modify_pwd, Module);

		Modify_pwd.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '[type=submit],.submit', function(e) {
				e.preventDefault();
				if(/[A-Z]/.test(that.$c.find("input[name='username']").val())){
					Core.showTips("账号不能有大写字母！");
				}else if(/[A-Z]/.test(that.$c.find("input[name='newpwd']").val())){
					Core.showTips("密码不能有大写字母！");
				}else{
					Core.ajax_do(that.$c.find('.ajax'), that.modify_cb, that);
				}

				return false;
			});
			that.$c.on('click', '.op-logout', function(e) {
				e.preventDefault();
				// Core.ajax_do(that.$c.find('.op-logout'), that.logout_cb,
				// that);
				that.logout_cb();
				return false;
			});
		}
		Modify_pwd.prototype.logout_cb = Home.prototype.logout_cb;
		Modify_pwd.prototype.modify_cb = function(data) {
			var status_code = data.code;
			var msg = data.msg,
				name = this.$c.find('input[name=username]').val(),
				password = this.$c.find('input[name=newpwd]').val(),
				name_ary,index_ary;

			var _d = localStorage.getItem('user_names'),
				_i = localStorage.getItem('user_indexs');
			if (_d) {
				name_ary = JSON.parse(_d);
			}
			if (_i) {
				index_ary = JSON.parse(_i);
			}

			if (status_code == 0) {
				if(Core.Data.is_guest == 1){
					//游客帐号转正
					localStorage.removeItem('guest_n');
					Core.showTips('升级账号成功！请妥善保管正式账号！', true);
					delete name_ary[Core.Data.nickname];
					localStorage.setItem('user_names', JSON.stringify(name_ary));
				}else{
					Core.showTips('成功修改密码, 请记住新密码。', true);
					name_ary[msg.username] = password;
					localStorage.setItem('user_names', JSON.stringify(name_ary));
				}

				var getAcc = Core.Data.nickname;//升级前账号
				var getIndex = $.inArray(getAcc,index_ary);

				if(index_ary == null){
					index_ary = [];
					index_ary.unshift(name);
					localStorage.setItem('user_indexs', JSON.stringify(index_ary));
				}else{
					if(getIndex == -1){
						index_ary.unshift(name);
						localStorage.setItem('user_indexs', JSON.stringify(index_ary));
					}else{
						index_ary.splice(getIndex,1);
						index_ary.unshift(msg.username);
						localStorage.setItem('user_indexs', JSON.stringify(index_ary));
					}
				}
				if (name_ary == null) {
					name_ary = {};
					name_ary[name] = password;
					localStorage.setItem('user_names', JSON.stringify(name_ary));
				} else {
					if (!(name in name_ary)) {
						name_ary[name] = password;
						localStorage.setItem('user_names', JSON.stringify(name_ary));
					} else {
						name_ary[msg.username] = password;
						localStorage.setItem('user_names', JSON.stringify(name_ary));
					}
				}

				Core.user_names = name_ary;
				Core.user_indexs = index_ary;

				Core.Data.is_guest = msg.is_guest;
				Core.Data.username = msg.username;
				Core.Data.nickname = msg.nickname;
				$("input[name='loginUserName']").val(Core.Data.username);
				$("input[name='loginPassword']").val(Core.user_names[Core.Data.username]);
				// 强制更新显示home模块,模块自刷新
				this.isValid = false;
				Core.updateMod('home');
			} else {
				Core.showTips(msg, false);
			}
		}
		Core.registerMod('modify_pwd', Modify_pwd);

		var Frame = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Frame, Module);
		Frame.prototype.bind = function() {
			var that = this;
			that.$c.on('click', '.scroll-btn', function(e) {
				e.preventDefault();
				e.stopPropagation();
				var $frame = that.$c.find('iframe');
				var h1 = $frame.height();
				var h2 = that.$c.find('.ios_scroll').height();
				var top = parseInt($frame.css('margin-top'));
				if ($(e.currentTarget).hasClass('scroll-up')) {
					if (Math.abs(top) + 20 > (h1 - h2)) return;
					$frame.css('margin-top', top - 50);
				} else {
					if (top >= 0) return;
					$frame.css('margin-top', top + 50);
				}
			});
		}
		Frame.prototype.show_after = function() {
			var that = this;
			var _des = Core.last_mod ? Core.last_mod : 'home';
			var $frame = that.$c.find('iframe');
			var $div = that.$c.find('.ios_scroll');
			var isFix = that.$c.is('.fix, .nofix');
			this.$c.find('a.btn.pull-left').attr('href', '#' + _des);
			$frame[0].onload = function() {
				that.$c.find('#loading_frame').hide();
				if (Core.isAndroid && !isFix) {
					var h1 = $frame.height();
					var h2 = $div.height();
					if (h1 > h2) {
						//android 低版本浏览器，需要提供手动滚动iframe
						that.$c.addClass('fix');
					} else {
						that.$c.addClass('nofix');
					}
				}
			}
		}
		Core.registerMod('frame', Frame);

		/**
		 * 公告活动记录模块
		 */
		var Activity = function(modId) {
			this.myScroll = null;
			this.cur_id = null;
			Module.call(this, modId);
		}
		Core.inherit(Activity, Module);
		Activity.prototype.bind = function() {
			var that = this;
			that.$c.on('click', 'li>a.item', function(e) {
				e.preventDefault();
				/*
				 * @todo-list bug fixed in android,the click event fired twice!
				 */
				if (Core.cur_mod == 'activity_detail')
					return;
				var $e = $(e.target);
				if (!$e.is('a'))
					$e = $e.parent();
				var id = $e.attr('data-id');
				if (id == that.cur_id) {
					Core.Data.activity_update = false;
					Core.showMod('activity_detail');
					return false;
				}
				that.cur_id = id;
				Core.Data.activity_update = true;
				Core.showTips('加载中...', true, 2000);
				$e.data('path', '/sdk/notice/view/?id=' + id);
				Core.load_json($e, function(data) {
					Core.Data.activity_detail = data;
					Core.showTips('加载完成!', true, 2000);
					Core.updateMod('activity_detail');
				}, that);
				// $.getJSON('/sdk/notice/view/?id=' + id, function(data) {
				// 	Core.Data.activity_detail = data;
				// 	Core.showTips('加载完成!', true, 2000);
				// 	Core.updateMod('activity_detail');
				// });
				return false;
			});
			that.$c.on('click', 'li.more a', function(e) {
				e.preventDefault();
				Core.load_html($(e.target), that.refresh, that);
				return false;
			});
		}
		Activity.prototype.refresh = function() {
			this.myScroll.refresh();
		}
		Activity.prototype.show_after = function() {
			if (this.$c.find('.activity-list').children().length == 0) {
				Core.load_html(this.$c.find('.activity-list'),
					this.act_cb, this);
			}
			var $badge = this.$c.find('.badge');
			if ($badge.length == 0) {
				if (Core.Data.msg_count > 0) {
					var $btn = this.$c.find('.badge_msg');
					$btn.html('<span class="badge">' + Core.Data.msg_count + '</span>' + $btn.html());
				}
			}
		}
		Activity.prototype.act_cb = function(data) {
			this.myScroll = new iScroll('activity_wrapper');
		}
		Core.registerMod('activity', Activity);

		/**
		 * 公告活动详细模块
		 */
		var Activity_detail = function(modId) {
			this.myScroll = null;
			Module.call(this, modId);
		}
		Core.inherit(Activity_detail, Module);
		Activity_detail.prototype.bind = function() {
			var that = this;
		}
		Activity_detail.prototype.show_after = function() {
			var that = this;
			if (Core.Data.activity_update) {
				console.log('new scroller');
				this.myScroll = new iScroll('detail_scroller');
				that.myScroll.refresh();
				this.$c.find('.scroll img').on('load', function(e) {
					console.log('img loaded in scroll');
					that.myScroll.refresh();
				});
			}
		}

		Core.registerMod('activity_detail', Activity_detail);
		/**
		 * 消息列表模块
		 */
		var Message = function(modId) {
			this.myScroll = null;
			this.cur_id = null;
			Module.call(this, modId);
		}
		Core.inherit(Message, Module);
		Message.prototype.bind = function() {
			var that = this;
			that.$c.on('click', 'li>a.item', function(e) {
				e.preventDefault();
				e.stopPropagation();
				/*
				 * @todo-list bug fixed in android,the click event fired twice!
				 */
				if (Core.cur_mod == 'message_detail')
					return;
				var $e = $(e.currentTarget);
				var id = $e.attr('data-id');
				if (id == that.cur_id) {
					Core.showMod('message_detail');
					return false;
				}
				that.cur_id = id;
				$e.data('path', '/message/' + id + '.html?format=json');
				Core.load_json($e, function(data) {
					Core.Data.message_detail = data;
					Core.showTips('加载完成!', true, 2000);
					Core.updateMod('message_detail');
				}, that);
				return false;
			});
			that.$c.on('click', 'li.more a', function(e) {
				e.preventDefault();
				Core.load_html($(e.target), that.refresh, that);
				return false;
			});
		}
		Message.prototype.refresh = function() {
			this.myScroll.refresh();
		}
		Message.prototype.show_after = function() {
			if (this.$c.find('.message-list').children().length == 0) {
				Core.load_html(this.$c.find('.message-list'), this.act_cb,
					this);
			}
		}
		Message.prototype.act_cb = function(data) {
			this.myScroll = new iScroll('message_wrapper');
		}
		Core.registerMod('message', Message);

		/**
		 * 消息内容详细模块
		 */
		var Message_detail = function(modId) {
			Module.call(this, modId);
		}
		Core.inherit(Message_detail, Module);

		Core.registerMod('message_detail', Message_detail);


		function login_init() {

			var names = localStorage.getItem("user_names"),
				userIndexs = localStorage.getItem("user_indexs");
			names = JSON.parse(names);
			if (names == null){
				names = null
			}
			else {
				delete names["undefined"];
				var user_indexs = [];
				for (var item in names){//遍历对象，排序
					if($.inArray(item,user_indexs) == -1){
						user_indexs.unshift(item);
					}
				}
				userIndexs = user_indexs;
				localStorage.setItem('user_indexs', JSON.stringify(userIndexs));
			}

			if ($.isArray(names)) {
				//旧版本，直接清除
				var i, l, _names = {};
				for (i = 0, l = names.length; i < l; i++) {
					_names[names[i]] = '';
				}
				names = _names
				localStorage.setItem('user_names', JSON.stringify(names));
			}
			Core.user_names = names;
			Core.user_indexs = userIndexs;

			if (names) {				
				for (var item in names) {
					Core.first_user = item;
					Core.first_password = names[item];
					break;
				}
			}		
			$("input#js_login_username").val(Core.first_user);
			$("input#js_login_password").val(Core.first_password);
		}
		login_init();
		if (window.isGetData == 1) {
			// 兼容旧版本sdk
			$('#loading').hide();
			Core.init();
		} else {
			window.isGetData = 1;
		}
	}
})();

$(document).on("click", ".mask", function(){
	$("input[type=password]").bind('cut copy paste', function(e){
		return false;
	});			
});