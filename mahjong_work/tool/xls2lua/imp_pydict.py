# -*- coding: utf-8 -*-

# write the data as python dict
# implement the write protocol
def encode(s): return s.encode('gbk')
f = None

def WRITE_DATA(value, type_):
	if type_ == "default":
		if isinstance(value, int ):
			type_ = "int"
			value = str(value)
		elif isinstance(value, float):
			type_ = "float"
			value = str(value)
		elif isinstance(value, (str, unicode)):
			type_ = "str"
		else:
			print ">>> [E] type error:(%s,%s)"%(value, type_)

	if not isinstance(value, (str, unicode)):
		value = str(value)

	if type_ == "str" or type_ == "text":
		f.write( "'" + encode(value).replace("'", "\\'").replace("\n", "") + "'" )
	elif type_ == "int":
		try:
			f.write( str(int(float(value))) )
		except:
			f.write( "0" )
	elif type_ == "float":
		if len(value) == 0:
			f.write(str(0.0))
		else:
			f.write( str(float(value)) )
	elif type_ == "floating":
		if len(value) == 0:
			f.write(str(0.0))
		else:
			f.write( str(float(value)) )
	elif type_ == "py":
		if value != '':
			f.write( value )
		else:
			f.write('None')
	elif type_ == "lua":
		f.write( value )
	elif type_ == "text":
		f.write("TEXT('"+encode(value).replace("'", "\\'").replace("\n", "")+"')")
	elif type_ == "macro":
		if len(value) == 0:
			f.write("''")
		else:
			f.write(encode(value))
	elif type_ == "str_list" or type_ == "text_str_list":
		if isinstance(value, list):
			write_list(vale, "\t\t", "str")
		else:
			value = value.split(",")
			write_list(value, "\t\t", "str")
	else:
		print ">>> [E] type error:(%s,%s)"%(value, type_)
		
def START_DATA(xls_file, file_, sheet):
	import os
	global f
	file_ = file_ + ".py"
	f = open( file_ , 'w')
	f.write( "# ------------------------------\n" )
	f.write( "# desc: generated by xls2data.py\n"  )
	f.write( "# source: " )
	f.write( os.path.basename(xls_file) )
	f.write( "\n" )
	f.write( "# sheet: %s\n"%sheet.encode("gbk") )
	f.write( "# ------------------------------\n" )

	f.write( "\n\n%s = {\n" % "data")

def START_DICT(name):
	pass

def START_ROW(id_, type_):
	f.write( "\t" )
	WRITE_DATA(id_, type_)
	f.write( " : {\n" )

def WRITE_ATTR(key, value, type_):
	f.write( "\t\t" )
	WRITE_DATA( key, "str" )
	f.write( " : " )
	WRITE_DATA( value, type_ )
	f.write( ",\n" )


def END_ROW():
	f.write( "\t},\n" )

def END_DATA():
	f.write( "}\n" )
def WRITE_RAW(string):
	pass

def END():
	f.close()

def write_dict(value, indent):
	f.write( "{\n")
	for key in value.iterkeys():
		f.write( indent + "\t")
		write_variable(key, indent)
		f.write(":")
		write_variable(value[key], indent + "\t")
		f.write(",\n")
	f.write( indent + "}")

def write_variable(value, indent, t="default"):
	if isinstance(value, dict):
		write_dict(value, indent)
	elif isinstance(value, list) or isinstance(value, tuple):
		write_list(value, indent)
	else:
		WRITE_DATA(value, t)

def write_list(value, indent, t="default"):
	f.write( "[\n")
	for v in value:
		f.write( indent + "\t")
		write_variable(v, indent + "\t", t)
		f.write(",\n")
	f.write( indent + "]")

